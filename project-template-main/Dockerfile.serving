# To build a container, you will use the docker build command
# https://docs.docker.com/engine/reference/commandline/build/
#
#   docker build -t <IMAGE TAG> -f Dockerfile.serving .
#   docker build -t <IMAGE TAG> -f Dockerfile.jupyter .
#


# https://docs.docker.com/engine/reference/builder/#from
# You shouldn't need to change this
FROM python:3.7
ARG COMET_API_KEY
# https://docs.docker.com/engine/reference/builder/#workdir
# Create and cd into /code as your working directory
WORKDIR /code


# The main docker commands you will find useful:
# 
# Add a file or directory
# https://docs.docker.com/engine/reference/builder/#add
#
#       ADD ./<SOURCE_DIR/FILE> ./<DOCKER_DIR/FILE>
#
# Run a shell command (tip: chain shell commands with && rather than multiple RUN commands)
# https://docs.docker.com/engine/reference/builder/#run
#
#       RUN <SHELL COMMAND>   
#
# Set an environment variable:
# https://docs.docker.com/engine/reference/builder/#env
#
#       ENV <ENV_VAR>=<DEFAULT>
#
# Expose a port
# https://docs.docker.com/engine/reference/builder/#port
#
#       EXPOSE <PORT>
#
# Provide default command for executing container
# https://docs.docker.com/engine/reference/builder/#cmd
#
#       CMD <SHELL COMMAND>



# TODO: add code, optionally a default model if you want 
ADD ./comet_models/question5.3_grid_search_fts_selected.json ./comet_models/
ADD ./ift6758/ ./ift6758/
ADD ./serving .
ADD ./setup.py ./setup.py
ADD ./requirements.txt ./requirements.txt
# TODO: install libs
RUN pip3 install -r requirements.txt
RUN pip3 install -e .

ENV COMET_API_KEY=$COMET_API_KEY
RUN pip3 install python-dotenv

RUN pip3 install gunicorn

CMD gunicorn --bind 127.0.0.1:8088 --timeout 30 app:app


# TODO: expose ports (or do this in docker-compose)
EXPOSE 8088

# TODO: specify default command - this is not required because you can always specify the command
# either with the docker run command or in the docker-compose file
